namespace KafkaRestProducer.Tests.Kafka;

using FluentAssertions;
using KafkaRestProducer.Kafka;
using KafkaRestProducer.Models;
using KafkaRestProducer.Wrappers;
using Moq;
using Newtonsoft.Json.Linq;
using Xunit;

public class MessageSerializerTests
{
    private readonly Mock<IAssemblyWrapper> assemblyWrapperMock;
    private readonly MessageSerializer messageSerializer;

    public MessageSerializerTests()
    {
        this.assemblyWrapperMock = new Mock<IAssemblyWrapper>();
        this.messageSerializer = new MessageSerializer(assemblyWrapperMock.Object);
    }

    [Fact]
    public void OnSingleSerialize_WithJsonSerializer_ShouldReturnJsonObject()
    {
        // Arrange
        const bool autoGeneratePayload = false;

        var payload = new
        {
            Id = 1,
            Name = "SomeOne"
        };

        // Act
        var result = this.messageSerializer.Serialize(
            SerializerType.Json,
            string.Empty,
            autoGeneratePayload,
            payload);

        // Assert
        result.Should().NotBeNull();
        result.Should().BeOfType<JObject>();
    }

    [Fact]
    public void OnSingleSerialize_WithProtobufSerializerAndCustomPayload_ShouldReturnObject()
    {
        // Arrange
        const string contract = "FakeContract";

        const bool autoGeneratePayload = false;

        var payload = new
        {
            Id = 1,
            Name = "SomeOne"
        };

        this.assemblyWrapperMock
            .Setup(x => x.GetType(It.Is<string>(s => s == contract)))
            .Returns(typeof(FakeContract))
            .Verifiable();

        // Act
        var result = this.messageSerializer.Serialize(
            SerializerType.Protobuf,
            contract,
            autoGeneratePayload,
            payload);

        // Assert
        this.assemblyWrapperMock.Verify();
        result.Should().NotBeNull();
        result.Should().BeOfType<FakeContract>();
    }

    [Fact]
    public void OnSingleSerialize_WithProtobufSerializerAndAutoGeneratedPayload_ShouldReturnObject()
    {
        // Arrange
        const string contract = "FakeContract";

        const bool autoGeneratePayload = true;

        this.assemblyWrapperMock
            .Setup(x => x.GetType(It.Is<string>(s => s == contract)))
            .Returns(typeof(FakeContract))
            .Verifiable();

        // Act
        var result = this.messageSerializer.Serialize(
            SerializerType.Protobuf,
            contract,
            autoGeneratePayload,
            null);

        // Assert
        this.assemblyWrapperMock.Verify();
        result.Should().NotBeNull();
        result.Should().BeOfType<FakeContract>();
    }
    
    [Fact]
    public void OnSingleSerialize_WithAvroSerializerAndCustomPayload_ShouldReturnObject()
    {
        // Arrange
        const string contract = "FakeContract";

        const bool autoGeneratePayload = false;

        var payload = new
        {
            Id = 1,
            Name = "SomeOne"
        };

        this.assemblyWrapperMock
            .Setup(x => x.GetType(It.Is<string>(s => s == contract)))
            .Returns(typeof(FakeContract))
            .Verifiable();

        // Act
        var result = this.messageSerializer.Serialize(
            SerializerType.Avro,
            contract,
            autoGeneratePayload,
            payload);

        // Assert
        this.assemblyWrapperMock.Verify();
        result.Should().NotBeNull();
        result.Should().BeOfType<FakeContract>();
    }

    [Fact]
    public void OnSingleSerialize_WithAvroSerializerAndAutoGeneratedPayload_ShouldReturnObject()
    {
        // Arrange
        const string contract = "FakeContract";

        const bool autoGeneratePayload = true;

        this.assemblyWrapperMock
            .Setup(x => x.GetType(It.Is<string>(s => s == contract)))
            .Returns(typeof(FakeContract))
            .Verifiable();

        // Act
        var result = this.messageSerializer.Serialize(
            SerializerType.Avro,
            contract,
            autoGeneratePayload,
            null);

        // Assert
        this.assemblyWrapperMock.Verify();
        result.Should().NotBeNull();
        result.Should().BeOfType<FakeContract>();
    }

    [Fact]
    public void OnBulkSerialize_ShouldReturnListOfObjects()
    {
        // Arrange
        const int iterations = 15;

        this.assemblyWrapperMock
            .Setup(x => x.GetType(It.IsAny<string>()))
            .Returns(typeof(FakeContract))
            .Verifiable();

        // Act
        var result = this.messageSerializer.Serialize("FakeContract", iterations);

        // Assert
        this.assemblyWrapperMock.Verify();
        result.Should().HaveCount(iterations);
        result.Select(x => x.GetType()).Should().AllBeOfType<FakeContract>();
    }
}

public class FakeContract
{
    public int Id { get; set; } = 1;

    public string Name { get; set; } = string.Empty;
}
