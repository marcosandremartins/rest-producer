namespace KafkaRestProducer.Tests.Kafka;

using FluentAssertions;
using KafkaRestProducer.Kafka;
using KafkaRestProducer.Models;
using KafkaRestProducer.Wrappers;
using Newtonsoft.Json.Linq;
using NSubstitute;
using Xunit;

public class MessageSerializerTests
{
    [Fact]
    public void OnSingleSerialize_WithJsonSerializer_ShouldReturnJsonObject()
    {
        // Arrange
        var assemblyWrapperMock = Substitute.For<IAssemblyWrapper>();
        var messageSerializer = new MessageSerializer(assemblyWrapperMock);

        const bool autoGeneratePayload = false;

        var messageRequest = new MessageRequest
        {
            Serializer = SerializerType.Json,
            Payload = new
            {
                Id = 1,
                Name = "SomeOne"
            }
        };

        // Act
        var result = messageSerializer.Serialize(
            messageRequest,
            autoGeneratePayload);

        // Assert
        result.Should().NotBeNull();
        result.Should().BeOfType<JObject>();
    }

    [Fact]
    public void OnSingleSerialize_WithProtobufSerializerAndCustomPayload_ShouldReturnObject()
    {
        // Arrange
        var assemblyWrapperMock = Substitute.For<IAssemblyWrapper>();
        var messageSerializer = new MessageSerializer(assemblyWrapperMock);

        const bool autoGeneratePayload = false;

        var messageRequest = new MessageRequest
        {
            Serializer = SerializerType.Protobuf,
            Contract = "FakeContract",
            Payload = new
            {
                Id = 1,
                Name = "SomeOne",
                Addresses = new List<string> { "street1", "street2" }
            }
        };

        assemblyWrapperMock
            .GetType(Arg.Is<string>(s => s == messageRequest.Contract))
            .Returns(typeof(FakeContract));

        // Act
        var result = messageSerializer.Serialize(
            messageRequest,
            autoGeneratePayload);

        // Assert
        assemblyWrapperMock.Received().GetType(Arg.Is<string>(s => s == messageRequest.Contract));
        result.Should().NotBeNull();
        result.Should().BeOfType<FakeContract>();

        var fakeContract = new FakeContract
        {
            Id = 1,
            Name = "SomeOne",
        };

        fakeContract.AddAddress("street1");
        fakeContract.AddAddress("street2");

        ((FakeContract)result).Should().BeEquivalentTo(fakeContract);
    }

    [Fact]
    public void OnSingleSerialize_WithProtobufSerializerAndAutoGeneratedPayload_ShouldReturnObject()
    {
        // Arrange
        var assemblyWrapperMock = Substitute.For<IAssemblyWrapper>();
        var messageSerializer = new MessageSerializer(assemblyWrapperMock);

        const bool autoGeneratePayload = true;

        var messageRequest = new MessageRequest
        {
            Serializer = SerializerType.Protobuf,
            Contract = "FakeContract"
        };

        assemblyWrapperMock
            .GetType(Arg.Is<string>(s => s == messageRequest.Contract))
            .Returns(typeof(FakeContract));

        // Act
        var result = messageSerializer.Serialize(
            messageRequest,
            autoGeneratePayload);

        // Assert
        assemblyWrapperMock.Received().GetType(Arg.Is<string>(s => s == messageRequest.Contract));
        result.Should().NotBeNull();
        result.Should().BeOfType<FakeContract>();
    }

    [Fact]
    public void OnSingleSerialize_WithAvroSerializerAndCustomPayload_ShouldReturnObject()
    {
        // Arrange
        var assemblyWrapperMock = Substitute.For<IAssemblyWrapper>();
        var messageSerializer = new MessageSerializer(assemblyWrapperMock);
        const bool autoGeneratePayload = false;

        var messageRequest = new MessageRequest
        {
            Serializer = SerializerType.Avro,
            Contract = "FakeContract",
            Payload = new
            {
                Id = 1,
                Name = "SomeOne"
            }
        };

        assemblyWrapperMock
            .GetType(Arg.Is<string>(s => s == messageRequest.Contract))
            .Returns(typeof(FakeContract));

        // Act
        var result = messageSerializer.Serialize(
            messageRequest,
            autoGeneratePayload);

        // Assert
        assemblyWrapperMock.Received().GetType(Arg.Is<string>(s => s == messageRequest.Contract));
        result.Should().NotBeNull();
        result.Should().BeOfType<FakeContract>();
    }

    [Fact]
    public void OnSingleSerialize_WithAvroSerializerAndAutoGeneratedPayload_ShouldReturnObject()
    {
        // Arrange
        var assemblyWrapperMock = Substitute.For<IAssemblyWrapper>();
        var messageSerializer = new MessageSerializer(assemblyWrapperMock);
        const bool autoGeneratePayload = true;
        
        var messageRequest = new MessageRequest
        {
            Serializer = SerializerType.Avro,
            Contract = "FakeContract"
        };

        assemblyWrapperMock
            .GetType(Arg.Is<string>(s => s == messageRequest.Contract))
            .Returns(typeof(FakeContract));

        // Act
        var result = messageSerializer.Serialize(
            messageRequest,
            autoGeneratePayload);

        // Assert
        assemblyWrapperMock.Received().GetType(Arg.Is<string>(s => s == messageRequest.Contract));
        result.Should().NotBeNull();
        result.Should().BeOfType<FakeContract>();
    }

    [Fact]
    public void OnBulkSerialize_ShouldReturnListOfObjects()
    {
        // Arrange
        var assemblyWrapperMock = Substitute.For<IAssemblyWrapper>();
        var messageSerializer = new MessageSerializer(assemblyWrapperMock);

        var messageRequestBulk = new MessageRequestBulk
        {
            Serializer = SerializerType.Avro,
            Contract = "FakeContract",
            NumberOfMessages = 15
        };

        assemblyWrapperMock
            .GetType(Arg.Any<string>())
            .Returns(typeof(FakeContract));


        // Act
        var result = messageSerializer.BulkSerialize(messageRequestBulk);

        // Assert
        assemblyWrapperMock.Received().GetType(Arg.Any<string>());
        result.Should().HaveCount(messageRequestBulk.NumberOfMessages);
        result.Select(x => x.GetType()).Should().AllBeOfType<FakeContract>();
    }
}

public class FakeContract
{
    private readonly List<string> addresses;

    public int Id { get; set; } = 1;

    public string Name { get; set; } = string.Empty;

    public List<string> Addresses { get; } = new List<string>();

    public void AddAddress(string address)
    {
        this.Addresses.Add(address);
    }
}
